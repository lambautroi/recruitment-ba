const faker = require("faker");
const db = require("./db");
const Application = require("../models/applicationModel");
const Job = require("../models/jobModel");
const User = require("../models/userModel");
const Candidate = require("../models/candidateModel");

console.log("üöÄ Starting to create mock applications...");

// ƒê·ª£i connection ·ªïn ƒë·ªãnh
setTimeout(async () => {
    try {
        console.log("üìä Fetching data from database...");

        // L·∫•y d·ªØ li·ªáu v·ªõi timeout
        const [users, jobs, candidates] = await Promise.all([
            User.find({ role: "user" }).maxTimeMS(30000),
            Job.find({}).maxTimeMS(30000),
            Candidate.find({}).maxTimeMS(30000),
        ]);

        // Ki·ªÉm tra d·ªØ li·ªáu
        if (users.length === 0) {
            console.log("‚ùå No users found. Please create users first.");
            process.exit(1);
        }

        if (jobs.length === 0) {
            console.log("‚ùå No jobs found. Please create jobs first.");
            process.exit(1);
        }

        if (candidates.length === 0) {
            console.log(
                "‚ùå No candidates found. Please create candidates first."
            );
            process.exit(1);
        }

        console.log(
            `‚úÖ Found ${users.length} users, ${jobs.length} jobs, ${candidates.length} candidates`
        );

        const mockApplications = [];

        // Cover letter templates theo ng√†nh ngh·ªÅ
        const coverLetterTemplates = {
            IT: [
                "T√¥i l√† m·ªôt developer v·ªõi ƒëam m√™ c√¥ng ngh·ªá. Qua qu√° tr√¨nh h·ªçc t·∫≠p v√† l√†m vi·ªác, t√¥i ƒë√£ t√≠ch l≈©y ƒë∆∞·ª£c kinh nghi·ªám v·ªõi JavaScript, React v√† Node.js. T√¥i tin r·∫±ng c√≥ th·ªÉ ƒë√≥ng g√≥p t√≠ch c·ª±c cho d·ª± √°n c·ªßa c√¥ng ty.",
                "V·ªõi n·ªÅn t·∫£ng k·ªπ thu·∫≠t v·ªØng ch·∫Øc v√† kh·∫£ nƒÉng h·ªçc h·ªèi nhanh, t√¥i ƒë√£ tham gia ph√°t tri·ªÉn nhi·ªÅu ·ª©ng d·ª•ng web. T√¥i r·∫•t h·ª©ng th√∫ v·ªõi v·ªã tr√≠ n√†y v√† mong mu·ªën ƒë∆∞·ª£c l√†m vi·ªác trong m√¥i tr∆∞·ªùng chuy√™n nghi·ªáp.",
                "T√¥i c√≥ kinh nghi·ªám ph√°t tri·ªÉn full-stack v√† am hi·ªÉu c√°c c√¥ng ngh·ªá hi·ªán ƒë·∫°i. V·ªõi tinh th·∫ßn l√†m vi·ªác nh√≥m v√† k·ªπ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ, t√¥i tin s·∫Ω ph√π h·ª£p v·ªõi y√™u c·∫ßu c√¥ng vi·ªác.",
                "L√† m·ªôt l·∫≠p tr√¨nh vi√™n tr·∫ª ƒë·∫ßy nhi·ªát huy·∫øt, t√¥i lu√¥n c·∫≠p nh·∫≠t ki·∫øn th·ª©c m·ªõi v√† √°p d·ª•ng v√†o c√¥ng vi·ªác. T√¥i mong mu·ªën ƒë∆∞·ª£c h·ªçc h·ªèi v√† ph√°t tri·ªÉn c√πng v·ªõi ƒë·ªôi ng≈© k·ªπ thu·∫≠t c·ªßa c√¥ng ty.",
            ],
            Marketing: [
                "T√¥i c√≥ ni·ªÅm ƒëam m√™ v·ªõi marketing digital v√† ƒë√£ c√≥ kinh nghi·ªám th·ª±c t·∫ø v·ªõi Facebook Ads, Google Ads. T√¥i tin r·∫±ng c√≥ th·ªÉ ƒë√≥ng g√≥p hi·ªáu qu·∫£ cho chi·∫øn l∆∞·ª£c marketing c·ªßa c√¥ng ty.",
                "V·ªõi kh·∫£ nƒÉng s√°ng t·∫°o content v√† hi·ªÉu bi·∫øt v·ªÅ xu h∆∞·ªõng th·ªã tr∆∞·ªùng, t√¥i ƒë√£ th·ª±c hi·ªán th√†nh c√¥ng nhi·ªÅu chi·∫øn d·ªãch marketing. T√¥i r·∫•t quan t√¢m ƒë·∫øn v·ªã tr√≠ n√†y.",
                "T√¥i c√≥ k·ªπ nƒÉng ph√¢n t√≠ch d·ªØ li·ªáu v√† t∆∞ duy s√°ng t·∫°o trong vi·ªác x√¢y d·ª±ng th∆∞∆°ng hi·ªáu. V·ªõi kinh nghi·ªám l√†m vi·ªác trong lƒ©nh v·ª±c marketing, t√¥i tin s·∫Ω mang l·∫°i gi√° tr·ªã cho c√¥ng ty.",
                "Marketing l√† ƒëam m√™ c·ªßa t√¥i. T√¥i lu√¥n theo d√µi c√°c xu h∆∞·ªõng m·ªõi v√† c√≥ kh·∫£ nƒÉng tri·ªÉn khai chi·∫øn l∆∞·ª£c marketing hi·ªáu qu·∫£. T√¥i mong mu·ªën ƒë∆∞·ª£c √°p d·ª•ng kinh nghi·ªám v√†o v·ªã tr√≠ n√†y.",
            ],
            "K·∫ø to√°n": [
                "V·ªõi b·∫±ng c·ª≠ nh√¢n k·∫ø to√°n v√† kinh nghi·ªám th·ª±c t·∫ø, t√¥i th√†nh th·∫°o c√°c ph·∫ßn m·ªÅm k·∫ø to√°n v√† am hi·ªÉu quy ƒë·ªãnh thu·∫ø. T√¥i tin r·∫±ng c√≥ th·ªÉ ƒë·∫£m nh·∫≠n t·ªët c√¥ng vi·ªác n√†y.",
                "T√¥i c√≥ kinh nghi·ªám x·ª≠ l√Ω b√°o c√°o t√†i ch√≠nh v√† qu·∫£n l√Ω s·ªï s√°ch k·∫ø to√°n. V·ªõi t√≠nh c·∫©n th·∫≠n v√† ch√≠nh x√°c cao, t√¥i mong mu·ªën ƒë∆∞·ª£c ƒë√≥ng g√≥p cho b·ªô ph·∫≠n t√†i ch√≠nh c·ªßa c√¥ng ty.",
                "L√† m·ªôt k·∫ø to√°n vi√™n t·ªâ m·ªâ v√† c√≥ tr√°ch nhi·ªám, t√¥i ƒë√£ c√≥ kinh nghi·ªám l√†m vi·ªác v·ªõi Excel n√¢ng cao v√† c√°c ph·∫ßn m·ªÅm k·∫ø to√°n chuy√™n nghi·ªáp. T√¥i r·∫•t quan t√¢m ƒë·∫øn v·ªã tr√≠ n√†y.",
            ],
            "Nh√¢n s·ª±": [
                "T√¥i c√≥ ƒëam m√™ v·ªõi c√¥ng t√°c nh√¢n s·ª± v√† hi·ªÉu r√µ t·∫ßm quan tr·ªçng c·ªßa vi·ªác ph√°t tri·ªÉn ƒë·ªôi ng≈©. V·ªõi k·ªπ nƒÉng giao ti·∫øp t·ªët, t√¥i tin s·∫Ω ƒë√≥ng g√≥p hi·ªáu qu·∫£ cho b·ªô ph·∫≠n HR.",
                "Kinh nghi·ªám trong lƒ©nh v·ª±c tuy·ªÉn d·ª•ng v√† qu·∫£n l√Ω nh√¢n s·ª± ƒë√£ gi√∫p t√¥i hi·ªÉu r√µ nhu c·∫ßu c·ªßa doanh nghi·ªáp. T√¥i mong mu·ªën ƒë∆∞·ª£c √°p d·ª•ng ki·∫øn th·ª©c v√†o v·ªã tr√≠ n√†y.",
                "V·ªõi kh·∫£ nƒÉng ƒë√°nh gi√° nh√¢n s·ª± v√† x√¢y d·ª±ng ch√≠nh s√°ch HR, t√¥i ƒë√£ c√≥ kinh nghi·ªám th·ª±c t·∫ø trong vi·ªác qu·∫£n l√Ω v√† ph√°t tri·ªÉn nh√¢n vi√™n. T√¥i r·∫•t h·ª©ng th√∫ v·ªõi c∆° h·ªôi n√†y.",
            ],
            "B√°n h√†ng": [
                "T√¥i c√≥ kinh nghi·ªám b√°n h√†ng v√† k·ªπ nƒÉng t∆∞ v·∫•n kh√°ch h√†ng t·ªët. V·ªõi kh·∫£ nƒÉng giao ti·∫øp v√† thuy·∫øt ph·ª•c, t√¥i tin r·∫±ng c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u doanh s·ªë c·ªßa c√¥ng ty.",
                "L√† m·ªôt ng∆∞·ªùi c√≥ ƒëam m√™ v·ªõi c√¥ng vi·ªác kinh doanh, t√¥i ƒë√£ c√≥ kinh nghi·ªám chƒÉm s√≥c kh√°ch h√†ng v√† ph√°t tri·ªÉn th·ªã tr∆∞·ªùng. T√¥i mong mu·ªën ƒë∆∞·ª£c ƒë√≥ng g√≥p cho s·ª± ph√°t tri·ªÉn c·ªßa c√¥ng ty.",
                "V·ªõi kinh nghi·ªám b√°n h√†ng online v√† offline, t√¥i hi·ªÉu r√µ t√¢m l√Ω kh√°ch h√†ng v√† c√≥ kh·∫£ nƒÉng x√¢y d·ª±ng m·ªëi quan h·ªá t·ªët. T√¥i r·∫•t quan t√¢m ƒë·∫øn v·ªã tr√≠ sales n√†y.",
            ],
            default: [
                "T√¥i r·∫•t quan t√¢m ƒë·∫øn v·ªã tr√≠ n√†y v√† tin r·∫±ng kinh nghi·ªám c≈©ng nh∆∞ k·ªπ nƒÉng c·ªßa t√¥i ph√π h·ª£p v·ªõi y√™u c·∫ßu c√¥ng vi·ªác. T√¥i mong mu·ªën ƒë∆∞·ª£c ƒë√≥ng g√≥p v√†o s·ª± ph√°t tri·ªÉn c·ªßa c√¥ng ty.",
                "V·ªõi tinh th·∫ßn h·ªçc h·ªèi v√† tr√°ch nhi·ªám cao, t√¥i tin r·∫±ng m√¨nh c√≥ th·ªÉ th·ª±c hi·ªán t·ªët c√¥ng vi·ªác n√†y. T√¥i r·∫•t mong ƒë∆∞·ª£c c∆° h·ªôi ƒë·ªÉ ch·ª©ng minh nƒÉng l·ª±c c·ªßa m√¨nh.",
                "T√¥i c√≥ ƒë·ªông l·ª±c m·∫°nh m·∫Ω v√† s·∫µn s√†ng ƒë·ªëi m·∫∑t v·ªõi th·ª≠ th√°ch. T√¥i tin r·∫±ng s·ª± nhi·ªát huy·∫øt v√† chuy√™n nghi·ªáp c·ªßa t√¥i s·∫Ω mang l·∫°i gi√° tr·ªã cho c√¥ng ty.",
                "ƒê√¢y l√† c∆° h·ªôi m√† t√¥i ƒë√£ t√¨m ki·∫øm. V·ªõi kinh nghi·ªám v√† k·ªπ nƒÉng hi·ªán c√≥, t√¥i tin r·∫±ng c√≥ th·ªÉ ƒë√°p ·ª©ng t·ªët y√™u c·∫ßu c√¥ng vi·ªác v√† ph√°t tri·ªÉn c√πng c√¥ng ty.",
            ],
        };

        // Notes t·ª´ HR perspective
        const hrNotes = [
            "CV ·∫•n t∆∞·ª£ng, kinh nghi·ªám ph√π h·ª£p",
            "Candidate c√≥ potential t·ªët",
            "Skills match v·ªõi y√™u c·∫ßu",
            "C·∫ßn xem x√©t k·ªπ h∆°n",
            "Profile kh√° th√∫ v·ªã",
            "·ª®ng vi√™n ti·ªÅm nƒÉng",
            "C·∫ßn ph·ªèng v·∫•n ƒë·ªÉ ƒë√°nh gi√° th√™m",
            "Background t·ªët",
            "ƒê√°ng ƒë·ªÉ consider",
            "Kinh nghi·ªám ƒëa d·∫°ng",
        ];

        // T·∫°o applications cho t·ª´ng user
        users.forEach((user, userIndex) => {
            console.log(
                `Processing user ${userIndex + 1}/${users.length}: ${
                    user.email
                }`
            );

            // T√¨m candidate t∆∞∆°ng ·ª©ng
            const candidate = candidates.find((c) => c.email === user.email);

            if (!candidate) {
                console.log(`‚ö†Ô∏è  No candidate found for user: ${user.email}`);
                return;
            }

            // M·ªói candidate apply t·ª´ 1-5 jobs
            const numApplications = faker.datatype.number({ min: 1, max: 5 });
            const appliedJobIds = new Set();

            for (let i = 0; i < numApplications; i++) {
                // Ch·ªçn random job
                const randomJob =
                    jobs[
                        faker.datatype.number({ min: 0, max: jobs.length - 1 })
                    ];

                // Tr√°nh apply tr√πng job
                if (appliedJobIds.has(randomJob._id.toString())) {
                    continue;
                }
                appliedJobIds.add(randomJob._id.toString());

                // Ng√†y apply trong v√≤ng 60 ng√†y qua
                const appliedDate = faker.date.recent(60);

                // Ch·ªçn cover letter template (60% c√≥ cover letter)
                let coverLetter = null;
                if (faker.datatype.boolean({ probability: 0.6 })) {
                    // Determine category t·ª´ job ho·∫∑c candidate
                    let category = "default";
                    if (candidate.category_id) {
                        // C√≥ th·ªÉ map category_id to category name ·ªü ƒë√¢y
                        category = "default";
                    }

                    const templates =
                        coverLetterTemplates[category] ||
                        coverLetterTemplates["default"];
                    coverLetter = faker.random.arrayElement(templates);
                }

                // Tr·∫°ng th√°i v·ªõi t·ª∑ l·ªá th·ª±c t·∫ø
                const status = faker.random.arrayElement([
                    "applied",
                    "applied",
                    "applied",
                    "applied",
                    "applied",
                    "applied",
                    "applied", // 70%
                    "accepted",
                    "accepted", // 20%
                    "rejected", // 10%
                ]);

                // HR notes (40% c√≥ notes)
                const notes = faker.datatype.boolean({ probability: 0.4 })
                    ? faker.random.arrayElement(hrNotes)
                    : null;

                // Resume file (∆∞u ti√™n t·ª´ candidate)
                const resumeFile =
                    candidate.resume_file ||
                    `/uploads/candidates/cvs/cv-${
                        candidate._id
                    }-${faker.datatype.uuid()}.pdf`;

                mockApplications.push({
                    job_id: randomJob._id,
                    candidate_id: candidate._id,
                    resume_file: resumeFile,
                    applied_date: appliedDate,
                    status: status,
                    cover_letter: coverLetter,
                    notes: notes,
                });
            }
        });

        console.log(
            `üìù Generated ${mockApplications.length} mock applications`
        );

        // Th·ªëng k√™ tr∆∞·ªõc khi insert
        const statusCount = mockApplications.reduce((acc, app) => {
            acc[app.status] = (acc[app.status] || 0) + 1;
            return acc;
        }, {});

        const coverLetterCount = mockApplications.filter(
            (app) => app.cover_letter
        ).length;
        const notesCount = mockApplications.filter((app) => app.notes).length;

        console.log("üìä Preview statistics:");
        console.log("- Status distribution:", statusCount);
        console.log(
            `- With cover letter: ${coverLetterCount}/${
                mockApplications.length
            } (${Math.round(
                (coverLetterCount / mockApplications.length) * 100
            )}%)`
        );
        console.log(
            `- With HR notes: ${notesCount}/${
                mockApplications.length
            } (${Math.round((notesCount / mockApplications.length) * 100)}%)`
        );

        // Insert v√†o database
        console.log("üíæ Inserting into database...");

        const result = await Application.insertMany(mockApplications);

        console.log("‚úÖ Insert completed successfully!");

        // Th·ªëng k√™ cu·ªëi c√πng
        const finalStats = {
            total: result.length,
            applied: result.filter((app) => app.status === "applied").length,
            accepted: result.filter((app) => app.status === "accepted").length,
            rejected: result.filter((app) => app.status === "rejected").length,
            with_cover_letter: result.filter((app) => app.cover_letter).length,
            with_notes: result.filter((app) => app.notes).length,
            avg_per_candidate:
                Math.round((result.length / candidates.length) * 10) / 10,
        };

        console.log("\nüéâ FINAL STATISTICS:");
        console.log(`üìä Total applications: ${finalStats.total}`);
        console.log(`üìà Status breakdown:`);
        console.log(
            `   - Applied: ${finalStats.applied} (${Math.round(
                (finalStats.applied / finalStats.total) * 100
            )}%)`
        );
        console.log(
            `   - Accepted: ${finalStats.accepted} (${Math.round(
                (finalStats.accepted / finalStats.total) * 100
            )}%)`
        );
        console.log(
            `   - Rejected: ${finalStats.rejected} (${Math.round(
                (finalStats.rejected / finalStats.total) * 100
            )}%)`
        );
        console.log(
            `üíå With cover letter: ${
                finalStats.with_cover_letter
            } (${Math.round(
                (finalStats.with_cover_letter / finalStats.total) * 100
            )}%)`
        );
        console.log(
            `üìù With HR notes: ${finalStats.with_notes} (${Math.round(
                (finalStats.with_notes / finalStats.total) * 100
            )}%)`
        );
        console.log(
            `üë§ Average applications per candidate: ${finalStats.avg_per_candidate}`
        );

        console.log("\nüöÄ Mock applications created successfully!");
        process.exit(0);
    } catch (error) {
        console.error("‚ùå Error creating mock applications:", error);
        console.error("Error details:", error.message);

        if (error.name === "MongoTimeoutError") {
            console.log(
                "üí° Suggestion: Check if MongoDB is running and connection is stable"
            );
        }

        process.exit(1);
    }
}, 3000);
